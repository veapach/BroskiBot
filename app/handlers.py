import asyncio
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.must_parser as mp
import app.database.requests as rq

router = Router()

animation_texts = [
    '‚è≥ –ï—â–µ –≤—ã–≥—Ä—É–∂–∞–µ–º... ‚è≥',
    '‚è≥ –û—Å—Ç–∞–ª–æ—Å—å —á—É—Ç—å-—á—É—Ç—å.... ‚è≥',
    '‚è≥ –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ.... ‚è≥',
    '‚è≥ –£–∂–µ –≤–æ—Ç-–≤–æ—Ç.... ‚è≥',
    '‚è≥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.... ‚è≥'
]

class Register(StatesGroup):
    must_nickname = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –±—Ä–æ—Å–∫–∏! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è', reply_markup=kb.start_registration)

@router.callback_query(F.data == 'start_registration')
async def start_registration(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await state.set_state(Register.must_nickname)
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π @–Ω–∏–∫ –≤ Must, —Ç–æ–ª—å–∫–æ –±–µ–∑ "@", –∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º :)')

@router.message(Register.must_nickname)
async def registration_must(message: Message, state: FSMContext):
    await state.update_data(must_nickname=message.text)
    data = await state.get_data()
    await message.answer(f'–≠—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å?\n https://mustapp.com/@{data["must_nickname"]}', reply_markup=kb.confirm_registration)

@router.callback_query(F.data == 'confirm_reg_yes')
async def confirm_reg(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await rq.set_user(callback.from_user.id, data['must_nickname'])
    await state.clear()
    await callback.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    await callback.message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üéâ', reply_markup=kb.main)

@router.callback_query(F.data == 'confirm_reg_no')
async def confirm_reg_no(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
    await callback.message.edit_text('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ ‚ùå', reply_markup=kb.start_registration)

@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def show_profile(message: Message):
    await rq.check_user(message.from_user.id)
    rating = await mp.must_rating()
    await message.answer(f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nMust - https://mustapp.com/@{mp.must_nickname}/\n–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ - {rating}', reply_markup=kb.profile)

@router.message(F.text == '–°–µ—Ä–∏–∞–ª—ã')
async def serials(message: Message):
    await rq.check_user(message.from_user.id)
    await message.answer('‚è≥ –í—ã–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ <b>—Å–µ—Ä–∏–∞–ª–æ–≤</b>, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ‚è≥', parse_mode="html")
    global serials_list
    serials_list = await mp.get_serials()
    serials_text = '\n'.join([f'‚ûú {name} - https://mustapp.com{url}' for name, url in serials_list])
    await message.answer(f'<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:\n\n</b>{serials_text}', reply_markup=kb.serials_menu, parse_mode="html", disable_web_page_preview=True)

@router.message(F.text == '–§–∏–ª—å–º—ã')
async def movies(message: Message):
    await rq.check_user(message.from_user.id)
    await message.answer('‚è≥ –í—ã–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ <b>—Ñ–∏–ª—å–º–æ–≤</b>, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ‚è≥', parse_mode="html")
    global movies_list
    movies_list = await mp.get_movies()
    movies_text = '\n'.join([f'‚ûú {name} - https://mustapp.com{url}' for name, url in movies_list])
    await message.answer(f'<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤:\n\n</b>{movies_text}', reply_markup=kb.movies_menu, parse_mode="html", disable_web_page_preview=True)

@router.callback_query(F.data == 'random_serial')
async def random_serial(callback: CallbackQuery):
    await rq.check_user(callback.from_user.id)
    serial, url = await mp.get_random_serial()
    await callback.message.edit_text(f'üé≤ –í—ã–ø–∞–ª —Å–µ—Ä–∏–∞–ª - <b>{serial}</b>\n –°—Å—ã–ª–∫–∞ - {url}', reply_markup=kb.random_serial_menu, parse_mode="html")

@router.callback_query(F.data == 'random_movie')
async def random_movie(callback: CallbackQuery):
    await rq.check_user(callback.from_user.id)
    movie, url = await mp.get_random_movie()
    await callback.message.edit_text(f'üé≤ –í—ã–ø–∞–ª —Ñ–∏–ª—å–º - <b>{movie}</b>\n –°—Å—ã–ª–∫–∞ - {url}', reply_markup=kb.random_movies_menu, parse_mode="html")

@router.callback_query(F.data == 'serials')
async def serials_menu(callback: CallbackQuery):
    await callback.answer('–ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏–∞–ª–∞–º')
    serials_text = '\n'.join([f'‚ûú {name} - https://mustapp.com{url}' for name, url in serials_list])
    await callback.message.answer(f'<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:\n\n</b>{serials_text}', reply_markup=kb.serials_menu, parse_mode="html", disable_web_page_preview=True)

@router.callback_query(F.data == 'movies')
async def movies_menu(callback: CallbackQuery):
    await callback.answer('–ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å–º–∞–º')
    movies_text = '\n'.join([f'‚ûú {name} - https://mustapp.com{url}' for name, url in movies_list])
    await callback.message.answer(f'<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤:\n\n</b>{movies_text}', reply_markup=kb.movies_menu, parse_mode="html", disable_web_page_preview=True)