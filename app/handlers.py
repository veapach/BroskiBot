import asyncio
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from concurrent.futures import ThreadPoolExecutor

import app.keyboards as kb
import app.must_parser as mp
import app.database.requests as rq

router = Router()
random_chosed = False

executor = ThreadPoolExecutor()

animation_texts = [
        '‚è≥ –ï—â–µ –≤—ã–≥—Ä—É–∂–∞–µ–º... ‚è≥',
        '‚è≥ –û—Å—Ç–∞–ª–æ—Å—å —á—É—Ç—å-—á—É—Ç—å.... ‚è≥',
        '‚è≥ –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ.... ‚è≥',
        '‚è≥ –£–∂–µ –≤–æ—Ç-–≤–æ—Ç.... ‚è≥',
        '‚è≥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.... ‚è≥'
    ]

class Register(StatesGroup):
    must_nickname = State()


@router.message(CommandStart())
async def cmd_start(message:Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –±—Ä–æ—Å–∫–∏! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è', reply_markup=kb.start_registration)
    
@router.callback_query(F.data == 'start_registration')
async def start_registration(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    await state.set_state(Register.must_nickname)
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π @–Ω–∏–∫ –≤ Must, —Ç–æ–ª—å–∫–æ –±–µ–∑ "@", –∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º :)')
    
@router.message(Register.must_nickname)
async def registration_must(message: Message, state: FSMContext):
    await state.update_data(must_nickname=message.text)
    data = await state.get_data()
    await message.answer(f'–≠—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å?\n https://mustapp.com/@{data["must_nickname"]}', reply_markup=kb.confirm_registration)

@router.callback_query(F.data == 'confirm_reg_yes')
async def confirm_reg(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await rq.set_user(callback.from_user.id, data['must_nickname'])
    await state.clear()
    await callback.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    await callback.message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üéâ', reply_markup=kb.main)

@router.callback_query(F.data == 'confirm_reg_no')
async def confirm_reg_no(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
    await callback.message.edit_text(f'–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ ‚ùå', reply_markup=kb.start_registration)

@router.callback_query(F.data == 'backToMainMenu')
async def backToMainMeny(callback: CallbackQuery):
    await callback.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await callback.message.edit_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)
    
    
@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def show_profile(message: Message):
    await rq.check_user(message.from_user.id)
    mp.must_rating()
    await message.answer(f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nMust - https://mustapp.com/@{mp.must_nickname}/\n–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ - {mp.rating}', reply_markup=kb.profile)

@router.message(F.text == '–±—Ä–æ—Å–∫–∏')
async def nice(message: Message):
    await message.answer('—è –±—Ä–æ—Å–∫–∏ ;)')
    
@router.message(F.text == '–°–µ—Ä–∏–∞–ª—ã')
async def serials(message: Message):
    await rq.check_user(message.from_user.id)
    waiting_msg = await message.answer('‚è≥ –í—ã–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ <b>—Å–µ—Ä–∏–∞–ª–æ–≤</b>, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ‚è≥', parse_mode="html")
    
    loop = asyncio.get_event_loop()
    task = loop.run_in_executor(executor, mp.random_project)
    
    while not task.done():
        for text in animation_texts:
            await asyncio.sleep(2)
            await waiting_msg.edit_text(text, parse_mode='html')         
            if task.done():
                break
    
    await task
    serials_list = []
    for serial_with_url in zip(mp.serials, mp.urls):
        element = f'‚ûú {str(serial_with_url[0])} - '
        element += f'https://mustapp.com{str(serial_with_url[1])}'
        serials_list.append(element)
    await waiting_msg.edit_text(f'<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:\n\n</b>{'\n'.join(serials_list)}', 
                            reply_markup=kb.serials_menu, parse_mode="html", disable_web_page_preview=True)
    
    mp.clear_projects()

@router.message(F.text == '–§–∏–ª—å–º—ã')
async def movies(message: Message):
    await rq.check_user(message.from_user.id)
    waiting_msg = await message.answer('‚è≥ –í—ã–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ <b>—Ñ–∏–ª—å–º–æ–≤</b>, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ‚è≥', parse_mode="html")
    
    loop = asyncio.get_event_loop()
    task = loop.run_in_executor(executor, mp.random_project)
    
    while not task.done():
        for text in animation_texts:
            await asyncio.sleep(2)
            await waiting_msg.edit_text(text, parse_mode='html')         
            if task.done():
                break
    
    await task
    movie_list = []
    for movie_with_url in zip(mp.movies, mp.urls_movies):
        element = f'‚ûú {str(movie_with_url[0])} - '
        element += f'https://mustapp.com{str(movie_with_url[1])}'
        movie_list.append(element)
    await waiting_msg.edit_text(f'<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤:\n\n</b>{'\n'.join(movie_list)}', 
                            reply_markup=kb.movies_menu, parse_mode="html", disable_web_page_preview=True)
    
    mp.clear_projects()
 
@router.callback_query(F.data == 'serials')
async def randomSerial(callback: CallbackQuery):
    await rq.check_user(callback.from_user.id)
    await callback.answer('–ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏–∞–ª–∞–º')
    waiting_msg = await callback.message.edit_text('‚è≥ –í—ã–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ <b>—Å–µ—Ä–∏–∞–ª–æ–≤</b>, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ‚è≥', parse_mode="html")
    
    loop = asyncio.get_event_loop()
    task = loop.run_in_executor(executor, mp.random_project)

    while not task.done():
        for text in animation_texts:
            await asyncio.sleep(2)
            await waiting_msg.edit_text(text, parse_mode='html')         
            if task.done():
                break
    
    await task
    
    serials_list = []
    for serial_with_url in zip(mp.serials, mp.urls):
        element = f'‚ûú {str(serial_with_url[0])} - '
        element += f'https://mustapp.com{str(serial_with_url[1])}'
        serials_list.append(element)
    await waiting_msg.edit_text(f'<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:\n\n</b>{'\n'.join(serials_list)}', 
                            reply_markup=kb.serials_menu, parse_mode="html", disable_web_page_preview=True)
    mp.clear_projects()
    
    
@router.callback_query(F.data == 'movies')
async def randomSerial(callback: CallbackQuery):
    await rq.check_user(callback.from_user.id)
    await callback.answer('–ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å–º–∞–º')
    waiting_msg = await callback.message.edit_text('‚è≥ –í—ã–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ <b>—Ñ–∏–ª—å–º–æ–≤</b>, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ‚è≥', parse_mode="html")
    
    loop = asyncio.get_event_loop()
    task = loop.run_in_executor(executor, mp.random_project)

    while not task.done():
        for text in animation_texts:
            await asyncio.sleep(2)
            await waiting_msg.edit_text(text, parse_mode='html')         
            if task.done():
                break
    
    await task
    movie_list = []
    for movie_with_url in zip(mp.movies, mp.urls_movies):
        element = f'‚ûú {str(movie_with_url[0])} - '
        element += f'https://mustapp.com{str(movie_with_url[1])}'
        movie_list.append(element)
    await waiting_msg.edit_text(f'<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤:\n\n</b>{'\n'.join(movie_list)}', 
                            reply_markup=kb.movies_menu, parse_mode="html", disable_web_page_preview=True)
    mp.clear_projects()
    
    
@router.callback_query(F.data == 'random_serial')
async def randomSerial(callback: CallbackQuery):
    await callback.answer('–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞')
    await rq.check_user(callback.from_user.id) 
    await callback.message.edit_text(f'üé≤ –í—ã–ø–∞–ª —Å–µ—Ä–∏–∞–ª - <b>{mp.chosen_serial}</b>\n –°—Å—ã–ª–∫–∞ - {mp.chosen_serial_url}',
                        reply_markup=kb.random_serial_menu, parse_mode="html")

@router.callback_query(F.data == 'random_movie')
async def randomMovie(callback: CallbackQuery):
    await callback.answer('–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞')
    await rq.check_user(callback.from_user.id) 
    await callback.message.edit_text(f'üé≤ –í—ã–ø–∞–ª —Ñ–∏–ª—å–º - <b>{mp.chosen_movie}</b>\n –°—Å—ã–ª–∫–∞ - {mp.chosen_movie_url}',
                        reply_markup=kb.random_movies_menu, parse_mode="html")
    
    
    
